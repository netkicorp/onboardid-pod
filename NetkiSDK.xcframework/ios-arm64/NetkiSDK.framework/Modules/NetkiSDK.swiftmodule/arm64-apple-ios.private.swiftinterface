// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios17.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NetkiSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AudioToolbox
import Combine
import CoreData
import CoreGraphics
import CoreHaptics
import CoreImage
import CoreLocation
import Foundation
@_exported import NetkiSDK
import Photos
import Sentry
import Swift
import SwiftUI
import UIKit
import Vision
import _AVKit_SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
public enum AdditionalDataField : Swift.String, Swift.Codable {
  case INVESTOR_TYPE
  case IS_ACCREDITED_INVESTOR
  case IS_PHONE_VALIDATED
  case FIRST_NAME
  case LAST_NAME
  case MIDDLE_NAME
  case ALIAS
  case CLIENT_GUID
  case GENDER
  case COUNTRY_CODE
  case BIRTH_DATE
  case DEATH_DATE
  case BIRTH_LOCATION
  case PHONE_NUMBER
  case EMAIL
  case MEDICAL_LICENSE
  case SSN
  case TIN
  case DUI_NUMBER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Barcode : Swift.Codable {
  public var rawValue: Swift.String?
  public var displayValue: Swift.String?
  public var valueFormat: Swift.Int?
  public var driverLicense: NetkiSDK.DriverLicense?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DriverLicense : Swift.Codable {
  public var documentType: Swift.String?
  public var firstName: Swift.String?
  public var middleName: Swift.String?
  public var lastName: Swift.String?
  public var gender: Swift.String?
  public var addressStreet: Swift.String?
  public var addressCity: Swift.String?
  public var addressState: Swift.String?
  public var addressZip: Swift.String?
  public var licenseNumber: Swift.String?
  public var issueDate: Swift.String?
  public var expiryDate: Swift.String?
  public var birthDate: Swift.String?
  public var issuingCountry: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BusinessConfiguration : Swift.Codable {
  public var name: Swift.String?
  public var identificationId: Swift.String?
  public var welcomeMessage: Swift.String?
  public var logoLight: Swift.String?
  public var idRequiredFields: [NetkiSDK.IdRequiredField]?
  public var minimumAppVersion: Swift.String?
  public var phonePinTimeout: Swift.Int?
  public var phoneRetryAttemptLimit: Swift.Int?
  public var phoneUseAutomaticBypass: Swift.Bool?
  public var clientGuid: Swift.String?
  public var redirectBackLink: Swift.String?
  public var completedMessage: Swift.String?
  public var isGeolocationEnabled: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CaptureIdProperties : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Environments : Swift.String {
  case DEV
  case QA
  case PROD
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ErrorType : Swift.String, Swift.Codable {
  case NO_INTERNET
  case INVALID_DATA
  case INVALID_TOKEN
  case INVALID_ACCESS_CODE
  case INVALID_PHONE_NUMBER
  case INVALID_CONFIRMATION_CODE
  case USER_CANCEL_IDENTIFICATION
  case TRANSACTION_NOT_FOUND
  case UNEXPECTED_ERROR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct IdCountry : Swift.Codable, Swift.Hashable {
  public var name: Swift.String
  public var alpha2: Swift.String
  public var alpha3: Swift.String
  public var countryCallingCode: Swift.String
  public var hasBarcodeId: Swift.Bool
  public var flag: Swift.String?
  public var isBanned: Swift.Bool
  public init(name: Swift.String, alpha2: Swift.String, alpha3: Swift.String, countryCallingCode: Swift.String, hasBarcodeId: Swift.Bool, flag: Swift.String?, isBanned: Swift.Bool)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: NetkiSDK.IdCountry, b: NetkiSDK.IdCountry) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public protocol IdentificationDelegate {
  func onCaptureIdentificationSuccessfully(extraData: [Swift.String : Any]?)
  func onCaptureIdentificationCancelled(resultInfo: NetkiSDK.ResultInfo)
}
public struct IdentificationView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8NetkiSDK18IdentificationViewV4bodyQrvp", 0) __
}
public struct IdRequiredField : Swift.Codable {
  public let id: Swift.Int?
  public let options: [NetkiSDK.IdRequiredFieldOption]?
  public let choices: [NetkiSDK.IdRequiredField]?
  public let created: Swift.String?
  public let updated: Swift.String?
  public let isActive: Swift.Bool?
  public let name: Swift.String?
  public let dataType: Swift.String?
  public let regex: Swift.String?
  public let keypad: Swift.String?
  public let label: Swift.String?
  public let description: Swift.String?
  public let languageCode: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct IdRequiredFieldOption : Swift.Codable {
  public let id: Swift.Int?
  public let created: Swift.String?
  public let updated: Swift.String?
  public let isActive: Swift.Bool?
  public let key: Swift.String?
  public let position: Swift.Int?
  public let label: Swift.String?
  public let languageCode: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum IdType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case DRIVERS_LICENSE
  case PASSPORT
  case GOVERNMENT_ID
  case BIOMETRICS
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NetkiSDK.IdType]
  public typealias RawValue = Swift.String
  public static var allCases: [NetkiSDK.IdType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct LivenessInformation : Swift.Codable {
  public var livenessScore: Swift.Float?
  public var livenessActionAttempts: [[Swift.String : Swift.Bool?]]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class OnBoardId {
  public static let shared: NetkiSDK.OnBoardId
  public func initialize(environment: NetkiSDK.Environments? = nil)
  #if compiler(>=5.3) && $AsyncAwait
  public func configureWithToken(token: Swift.String, accessCode: Swift.String = "") async -> NetkiSDK.ResultInfo
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func requestSecurityCode(phoneNumber: Swift.String) async -> NetkiSDK.ResultInfo
  #endif
  public func bypassSecurityCode(phoneNumber: Swift.String)
  #if compiler(>=5.3) && $AsyncAwait
  public func confirmSecurityCode(phoneNumber: Swift.String, securityCode: Swift.String) async -> NetkiSDK.ResultInfo
  #endif
  public func setBusinessMetadata(businessMetadata: [Swift.String : Swift.String])
  public func getIdentificationView(idType: NetkiSDK.IdType, idCountry: NetkiSDK.IdCountry, identificationDelegate: any NetkiSDK.IdentificationDelegate) -> NetkiSDK.IdentificationView
  public func getCaptureIdIntent(idType: NetkiSDK.IdType, pictureType: NetkiSDK.PictureType, captureIdProperties: NetkiSDK.CaptureIdProperties)
  #if compiler(>=5.3) && $AsyncAwait
  public func submitIdentification(additionalData: [NetkiSDK.AdditionalDataField : Swift.String] = [:]) async -> NetkiSDK.ResultInfo
  #endif
  public func getBiometricsView(transactionId: Swift.String, identificationDelegate: any NetkiSDK.IdentificationDelegate) -> NetkiSDK.IdentificationView
  #if compiler(>=5.3) && $AsyncAwait
  public func submitBiometrics(additionalData: [NetkiSDK.AdditionalDataField : Swift.String] = [:]) async -> NetkiSDK.ResultInfo
  #endif
  public func getAvailableIdTypes() -> [NetkiSDK.IdType]
  public func getAvailableCountries() -> [NetkiSDK.IdCountry]
  public func getBusinessConfiguration() -> NetkiSDK.BusinessConfiguration
  public func setLocation(lat: Swift.String, lon: Swift.String)
  public func setLivenessSettings(enabled: Swift.Bool)
  public func setClientGuid(clientGuid: Swift.String)
  public func enableAsyncMode()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OnBoardIdUi {
  public static let shared: NetkiSDK.OnBoardIdUi
  public func setPrimaryButtonColor(hexString: Swift.String)
  public func setPrimaryButtonTextColor(hexString: Swift.String)
  public func setSecondaryButtonColor(hexString: Swift.String)
  public func setSecondaryButtonTextColor(hexString: Swift.String)
  public func setButtonsCornerRadius(_ cornerRadius: CoreFoundation.CGFloat)
  public func setInstructionsTextColor(hexString: Swift.String)
  public func setDriverLicenseInstructionsFrontText(text: Swift.String)
  public func setDriverLicenseInstructionsBackText(text: Swift.String)
  public func setGovernmentIdInstructionsFrontText(text: Swift.String)
  public func setGovernmentIdInstructionsBackText(text: Swift.String)
  public func setPassportInstructionsText(text: Swift.String)
  public func setSelfieInstructionsText(text: Swift.String)
  public func setDriverLicenseInstructionsFrontImagePath(path: Swift.String)
  public func setDriverLicenseInstructionsBackImagePath(path: Swift.String)
  public func setGovernmentIdInstructionsFrontImagePath(path: Swift.String)
  public func setGovernmentIdInstructionsBackImagePath(path: Swift.String)
  public func setPassportInstructionsImagePath(path: Swift.String)
  public func setSelfieInstructionsImagePath(path: Swift.String)
  public func setDriverLicenseInstructionsFrontVideoPath(path: Swift.String)
  public func setDriverLicenseInstructionsBackVideoPath(path: Swift.String)
  public func setGovernmentIdInstructionsFrontVideoPath(path: Swift.String)
  public func setGovernmentIdInstructionsBackVideoPath(path: Swift.String)
  public func setPassportInstructionsVideoPath(path: Swift.String)
  public func setSelfieInstructionsVideoPath(path: Swift.String)
  @objc deinit
}
public struct PassportContent : Swift.Codable {
  public var isValid: Swift.Bool
  public var confidence: Swift.Float
  public var text: Swift.String?
  public var passportType: Swift.String?
  public var countryCode: Swift.String?
  public var lastName: Swift.String?
  public var firstName: Swift.String?
  public var passportNumber: Swift.String?
  public var passportNumberDigitCheck: Swift.String?
  public var nationality: Swift.String?
  public var birthDate: Swift.String?
  public var birthDateDigitCheck: Swift.String?
  public var gender: Swift.String?
  public var expirationDate: Swift.String?
  public var expirationDateDigitCheck: Swift.String?
  public var personalNumber: Swift.String?
  public var personalNumberDigitCheck: Swift.String?
  public var stringDigitCheck: Swift.String?
  public var digitCheck: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers open class PersistentContainer : CoreData.NSPersistentContainer {
  @objc override dynamic public init(name: Swift.String, managedObjectModel model: CoreData.NSManagedObjectModel)
  @objc deinit
}
public struct Picture : Swift.Codable {
  public var path: Swift.String?
  public var barcodes: [NetkiSDK.Barcode]?
  public var passportContent: NetkiSDK.PassportContent?
  public var livenessInformation: NetkiSDK.LivenessInformation?
  public var type: NetkiSDK.PictureType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PictureType : Swift.String, Swift.Codable {
  case FRONT
  case BACK
  case LIVENESS
  case SELFIE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RequestStatus : Swift.Codable {
  case SUCCESS
  case ERROR
  public static func == (a: NetkiSDK.RequestStatus, b: NetkiSDK.RequestStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ResultInfo : Swift.Codable {
  public let status: NetkiSDK.RequestStatus
  public let extraData: Swift.Dictionary<Swift.String, Swift.String>?
  public let errorType: NetkiSDK.ErrorType?
  public let message: Swift.String?
  public static func success(extraData: Swift.Dictionary<Swift.String, Swift.String>? = nil) -> NetkiSDK.ResultInfo
  public static func error(errorType: NetkiSDK.ErrorType? = nil, message: Swift.String? = nil) -> NetkiSDK.ResultInfo
  public enum ExtraData : Swift.String, Swift.Codable {
    case PICTURES
    case MESSAGE
    case ERROR_TYPE
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension NetkiSDK.ResultInfo {
  public func isSuccessful() -> Swift.Bool
}
public func localizedString(_ key: Swift.String, tableName: Swift.String? = nil, value: Swift.String = "") -> Swift.String

@_inheritsConvenienceInitializers @objc(AddressEntity) public class AddressEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.AddressEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.AddressEntity>
  @objc @NSManaged dynamic public var address: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var city: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var countryCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identityId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var postalCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.String? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.AddressEntity : Swift.Identifiable {
  public typealias ID = Swift.Int16
}
@_inheritsConvenienceInitializers @objc(AppContextEntity) public class AppContextEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.AppContextEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.AppContextEntity>
  @objc @NSManaged dynamic public var accessCodePrefix: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accreditedInvestorFlow: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var appContextId: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var business: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var completedMessage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var hasAmlProvider: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var invalidAccessCodeMessage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isActive: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languageCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var logoDark: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var logoLight: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var phonePinTimeout: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var phoneRetryAttemptLimit: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var phoneUseAutomaticBypass: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var redirectBackLink: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var smsAccreditedMessage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var smsCorporateOnBoardMessage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var smsVerificationMessage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transactionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var updatedAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var welcomeMessage: Swift.String? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.AppContextEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(BarcodeEntity) public class BarcodeEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.BarcodeEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.BarcodeEntity>
  @objc @NSManaged dynamic public var displayValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dlAddressCity: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dlAddressState: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dlAddressStreet: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dlAddressZip: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dlBirthDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dlDocumentType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dlExpiryDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dlFirstName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dlGender: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dlIssueDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dlIssuingCountry: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dlLastName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dlLicenseNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dlMiddleName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var rawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var valueFormat: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension NetkiSDK.BarcodeEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(BusinessContextEntity) public class BusinessContextEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.BusinessContextEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.BusinessContextEntity>
  @objc @NSManaged dynamic public var businessContextId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var businessType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var countryCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var defaultWorkflow: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var email: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var implementationType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isActive: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isGeolocationEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isInvestorBusiness: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isResellerClient: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var minimumAppVersion: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var status: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transactionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var updatedAt: Swift.String? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.BusinessContextEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(BusinessMetadataEntity) public class BusinessMetadataEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.BusinessMetadataEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.BusinessMetadataEntity>
  @objc @NSManaged dynamic public var id: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identityId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var key: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var value: Swift.String? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.BusinessMetadataEntity : Swift.Identifiable {
  public typealias ID = Swift.Int16
}
@_inheritsConvenienceInitializers @objc(CallingCodeEntity) public class CallingCodeEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.CallingCodeEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.CallingCodeEntity>
  @objc @NSManaged dynamic public var code: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transactionId: Swift.String? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.CallingCodeEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(CountryEntity) public class CountryEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.CountryEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.CountryEntity>
  @objc @NSManaged dynamic public var alpha2: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var alpha3: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var countryCallingCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var has2dBarcode: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isBanned: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transactionId: Swift.String? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.CountryEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(DocumentEntity) public class DocumentEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.DocumentEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.DocumentEntity>
  @objc @NSManaged dynamic public var autoCapture: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var barcodeDetected: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var documentCentered: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var documentId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var documentType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var documentUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var faceIdDetected: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var faceSelfieDetected: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identityId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var idType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isGlareCorrect: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isLightCorrect: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isLive: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var livenessScore: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var numberOfTries: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var path: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var textMrzReadable: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var barcode: NetkiSDK.BarcodeEntity? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mrzData: NetkiSDK.PassportEntity? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.DocumentEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(DocumentLivenessCrossRef) public class DocumentLivenessCrossRef : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.DocumentLivenessCrossRef {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.DocumentLivenessCrossRef>
  @objc @NSManaged dynamic public var documentId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var livenessActionAttemptId: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension NetkiSDK.DocumentLivenessCrossRef : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(DocumentWithLivenessEntity) public class DocumentWithLivenessEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.DocumentWithLivenessEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.DocumentWithLivenessEntity>
  @objc @NSManaged dynamic public var documentEntity: NetkiSDK.DocumentEntity? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var livenessActionAttempt: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.DocumentWithLivenessEntity {
  @objc(addLivenessActionAttemptObject:) @NSManaged dynamic public func addToLivenessActionAttempt(_ value: NetkiSDK.LivenessActionAttemptEntity)
  @objc(removeLivenessActionAttemptObject:) @NSManaged dynamic public func removeFromLivenessActionAttempt(_ value: NetkiSDK.LivenessActionAttemptEntity)
  @objc(addLivenessActionAttempt:) @NSManaged dynamic public func addToLivenessActionAttempt(_ values: Foundation.NSSet)
  @objc(removeLivenessActionAttempt:) @NSManaged dynamic public func removeFromLivenessActionAttempt(_ values: Foundation.NSSet)
}
extension NetkiSDK.DocumentWithLivenessEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(EmailEntity) public class EmailEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.EmailEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.EmailEntity>
  @objc @NSManaged dynamic public var email: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identityId: Swift.String? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.EmailEntity : Swift.Identifiable {
  public typealias ID = Swift.Int16
}
@_inheritsConvenienceInitializers @objc(IdentityEntity) public class IdentityEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.IdentityEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.IdentityEntity>
  @objc @NSManaged dynamic public var alias: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var birthDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var birthLocation: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var clientGuid: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var countryCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var deathDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var documentType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var firstName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gender: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identityId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var investorType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isAccreditedInvestor: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isPhoneValidated: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lat: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lon: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var medicalLicense: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var middleName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ssn: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tin: Swift.String? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.IdentityEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(LivenessActionAttemptEntity) public class LivenessActionAttemptEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.LivenessActionAttemptEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.LivenessActionAttemptEntity>
  @objc @NSManaged dynamic public var action: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var documentId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isValid: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var livenessActionAttemptId: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension NetkiSDK.LivenessActionAttemptEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(LivenessSettingsEntity) public class LivenessSettingsEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.LivenessSettingsEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.LivenessSettingsEntity>
  @objc @NSManaged dynamic public var algorithm: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var enabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transactionId: Swift.String? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.LivenessSettingsEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(PassportEntity) public class PassportEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.PassportEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.PassportEntity>
  @objc @NSManaged dynamic public var birthDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var birthDateDigitCheck: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var confidence: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var countryCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var digitCheck: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var expirationDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var expirationDateDigitCheck: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var firstName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gender: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isValid: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nationality: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var passportNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var passportNumberDigitCheck: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var passportType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var personalNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var personalNumberDigitCheck: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var stringDigitCheck: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.PassportEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(PhoneNumberEntity) public class PhoneNumberEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.PhoneNumberEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.PhoneNumberEntity>
  @objc @NSManaged dynamic public var id: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identityId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var phoneNumber: Swift.String? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.PhoneNumberEntity : Swift.Identifiable {
  public typealias ID = Swift.Int16
}
@_inheritsConvenienceInitializers @objc(RequiredFieldChoicesCrossRef) public class RequiredFieldChoicesCrossRef : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.RequiredFieldChoicesCrossRef {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.RequiredFieldChoicesCrossRef>
  @objc @NSManaged dynamic public var requiredFieldChoiceId: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var requiredFieldId: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension NetkiSDK.RequiredFieldChoicesCrossRef : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(RequiredFieldChoicesEntity) public class RequiredFieldChoicesEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.RequiredFieldChoicesEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.RequiredFieldChoicesEntity>
  @objc @NSManaged dynamic public var created: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dataType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var desc: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isActive: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var keypad: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var label: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languageCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var regex: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var requiredFieldChoiceId: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var requiredFieldId: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var updatedAt: Swift.String? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.RequiredFieldChoicesEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(RequiredFieldEntity) public class RequiredFieldEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.RequiredFieldEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.RequiredFieldEntity>
  @objc @NSManaged dynamic public var created: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dataType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var desc: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var displayOrder: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isActive: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var keypad: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var label: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languageCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var regex: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var requiredFieldId: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transactionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var updatedAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var choices: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var options: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.RequiredFieldEntity {
  @objc(addChoicesObject:) @NSManaged dynamic public func addToChoices(_ value: NetkiSDK.RequiredFieldChoicesEntity)
  @objc(removeChoicesObject:) @NSManaged dynamic public func removeFromChoices(_ value: NetkiSDK.RequiredFieldChoicesEntity)
  @objc(addChoices:) @NSManaged dynamic public func addToChoices(_ values: Foundation.NSSet)
  @objc(removeChoices:) @NSManaged dynamic public func removeFromChoices(_ values: Foundation.NSSet)
}
extension NetkiSDK.RequiredFieldEntity {
  @objc(addOptionsObject:) @NSManaged dynamic public func addToOptions(_ value: NetkiSDK.RequiredFieldOptionEntity)
  @objc(removeOptionsObject:) @NSManaged dynamic public func removeFromOptions(_ value: NetkiSDK.RequiredFieldOptionEntity)
  @objc(addOptions:) @NSManaged dynamic public func addToOptions(_ values: Foundation.NSSet)
  @objc(removeOptions:) @NSManaged dynamic public func removeFromOptions(_ values: Foundation.NSSet)
}
extension NetkiSDK.RequiredFieldEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(RequiredFieldOptionEntity) public class RequiredFieldOptionEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.RequiredFieldOptionEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.RequiredFieldOptionEntity>
  @objc @NSManaged dynamic public var created: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isActive: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var key: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var label: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languageCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var optionId: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var position: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var requiredFieldId: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var updatedAt: Swift.String? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.RequiredFieldOptionEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(RequiredFieldOptionsCrossRef) public class RequiredFieldOptionsCrossRef : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.RequiredFieldOptionsCrossRef {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.RequiredFieldOptionsCrossRef>
  @objc @NSManaged dynamic public var optionId: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var requiredFieldId: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension NetkiSDK.RequiredFieldOptionsCrossRef : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(RequiredFieldWithOptionsEntity) public class RequiredFieldWithOptionsEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.RequiredFieldWithOptionsEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.RequiredFieldWithOptionsEntity>
  @objc @NSManaged dynamic public var requiredField: NetkiSDK.RequiredFieldEntity? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var requiredFieldsChoices: NetkiSDK.RequiredFieldChoicesEntity? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var requiredFieldsOptions: NetkiSDK.RequiredFieldOptionEntity? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.RequiredFieldWithOptionsEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(TransactionContextEntity) public class TransactionContextEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.TransactionContextEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.TransactionContextEntity>
  @objc @NSManaged dynamic public var appContext: NetkiSDK.AppContextEntity? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var businessContext: NetkiSDK.BusinessContextEntity? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var callingCodes: NetkiSDK.CallingCodeEntity? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var countries: NetkiSDK.CountryEntity? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var livenessSettings: NetkiSDK.LivenessSettingsEntity? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var requiredFields: NetkiSDK.RequiredFieldWithOptionsEntity? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transactionInfo: NetkiSDK.TransactionInfoEntity? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.TransactionContextEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(TransactionIdentityEntity) public class TransactionIdentityEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.TransactionIdentityEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.TransactionIdentityEntity>
  @objc @NSManaged dynamic public var addresses: NetkiSDK.AddressEntity? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var businessMetadata: NetkiSDK.BusinessMetadataEntity? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var documentWithLiveness: NetkiSDK.DocumentWithLivenessEntity? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var emails: NetkiSDK.EmailEntity? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identity: NetkiSDK.IdentityEntity? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var phoneNumbers: NetkiSDK.PhoneNumberEntity? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.TransactionIdentityEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(TransactionInfoEntity) public class TransactionInfoEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NetkiSDK.TransactionInfoEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NetkiSDK.TransactionInfoEntity>
  @objc @NSManaged dynamic public var accessToken: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var clientIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var deviceId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var locale: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var refreshToken: Swift.String? {
    @objc get
    @objc set
  }
}
extension NetkiSDK.TransactionInfoEntity : Swift.Identifiable {
  public typealias ID = Swift.String?
}
extension NetkiSDK.AdditionalDataField : Swift.Equatable {}
extension NetkiSDK.AdditionalDataField : Swift.Hashable {}
extension NetkiSDK.AdditionalDataField : Swift.RawRepresentable {}
extension NetkiSDK.Environments : Swift.Equatable {}
extension NetkiSDK.Environments : Swift.Hashable {}
extension NetkiSDK.Environments : Swift.RawRepresentable {}
extension NetkiSDK.ErrorType : Swift.Equatable {}
extension NetkiSDK.ErrorType : Swift.Hashable {}
extension NetkiSDK.ErrorType : Swift.RawRepresentable {}
extension NetkiSDK.IdType : Swift.Equatable {}
extension NetkiSDK.IdType : Swift.Hashable {}
extension NetkiSDK.IdType : Swift.RawRepresentable {}
extension NetkiSDK.PictureType : Swift.Equatable {}
extension NetkiSDK.PictureType : Swift.Hashable {}
extension NetkiSDK.PictureType : Swift.RawRepresentable {}
extension NetkiSDK.RequestStatus : Swift.Equatable {}
extension NetkiSDK.RequestStatus : Swift.Hashable {}
extension NetkiSDK.ResultInfo.ExtraData : Swift.Equatable {}
extension NetkiSDK.ResultInfo.ExtraData : Swift.Hashable {}
extension NetkiSDK.ResultInfo.ExtraData : Swift.RawRepresentable {}
